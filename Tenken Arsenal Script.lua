
-- This file has been obfuscated by NeckhurtZ
-- https://discord.gg/CaJZshkMd7

local giTAgAal = 5596 -- junk variable

local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local function dtwXDUay(data)
    data = string.gsub(data, '[^' .. b .. '=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r, f = '', (b:find(x) - 1)
        for i = 6, 1, -1 do
            r = r .. (f % 2^i - f % 2^(i - 1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c = 0
        for i = 1, 8 do
            c = c + (x:sub(i, i) == '1' and 2^(8 - i) or 0)
        end
        return string.char(c)
    end))
end

local NyXiFVCk = ""
local AyYUSTlJ = dtwXDUay(dtwXDUay(dtwXDUay(NyXiFVCk)))

-- Decompress + execute
local ok, result = pcall(function() return assert(loadstring(require('zlib').decompress(AyYUSTlJ))) end)
if ok then result() else error("Execution failed!") end
